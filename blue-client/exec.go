// Code generated by go generate; DO NOT EDIT.
// Code generated by go generate; DO NOT EDIT.
// Code generated by go generate; DO NOT EDIT.

package main

import (
	g "blue/api/go"
)

type CmdFunc func(*g.Client, []string) (string, error)

func Exec(conn *g.Client, s []string) (string, error) {
	if len(s) == 0 {
		return "", ErrCommand(s[0])
	}

	f, ok := funcMap[s[0]]
	if !ok {
		return "", ErrCommand(s[0])
	}
	return f(conn, s)
}

func Dbsize() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) != 1 {
			return "", ErrArgu(s[0])
		}
		return conn.Dbsize()
	}
}

func Del() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) != 2 {
			return "", ErrArgu(s[0])
		}
		return conn.Del(s[1])
	}
}

func Exit() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) != 1 {
			return "", ErrArgu(s[0])
		}
		return conn.Exit()
	}
}

func Expire() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) != 3 {
			return "", ErrArgu(s[0])
		}
		return conn.Expire(s[1],s[2])
	}
}

func Get() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) != 2 {
			return "", ErrArgu(s[0])
		}
		return conn.Get(s[1])
	}
}

func Help() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) != 2 {
			return "", ErrArgu(s[0])
		}
		return conn.Help(s[1])
	}
}

func Incr() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) != 2 {
			return "", ErrArgu(s[0])
		}
		return conn.Incr(s[1])
	}
}

func Kvs() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) != 1 {
			return "", ErrArgu(s[0])
		}
		return conn.Kvs()
	}
}

func Len() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) != 2 {
			return "", ErrArgu(s[0])
		}
		return conn.Len(s[1])
	}
}

func Lget() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) != 2 {
			return "", ErrArgu(s[0])
		}
		return conn.Lget(s[1])
	}
}

func Llen() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) != 2 {
			return "", ErrArgu(s[0])
		}
		return conn.Llen(s[1])
	}
}

func Lpop() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) != 2 {
			return "", ErrArgu(s[0])
		}
		return conn.Lpop(s[1])
	}
}

func Lpush() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) != 3 {
			return "", ErrArgu(s[0])
		}
		return conn.Lpush(s[1],s[2])
	}
}

func Lset() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) != 2 {
			return "", ErrArgu(s[0])
		}
		return conn.Lset(s[1])
	}
}

func Nget() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) != 2 {
			return "", ErrArgu(s[0])
		}
		return conn.Nget(s[1])
	}
}

func Nset() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) != 3 {
			return "", ErrArgu(s[0])
		}
		return conn.Nset(s[1],s[2])
	}
}

func Ping() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) != 1 {
			return "", ErrArgu(s[0])
		}
		return conn.Ping()
	}
}

func Rpop() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) != 2 {
			return "", ErrArgu(s[0])
		}
		return conn.Rpop(s[1])
	}
}

func Rpush() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) != 3 {
			return "", ErrArgu(s[0])
		}
		return conn.Rpush(s[1],s[2])
	}
}

func Sadd() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) != 3 {
			return "", ErrArgu(s[0])
		}
		return conn.Sadd(s[1],s[2])
	}
}

func Sdel() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) != 3 {
			return "", ErrArgu(s[0])
		}
		return conn.Sdel(s[1],s[2])
	}
}

func Select() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) > 2 {
			return "", ErrArgu(s[0])
		}
		if len(s) == 2 {
			return conn.Select(s[1])
		}
		return conn.Select()
	}
}

func Set() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) != 3 {
			return "", ErrArgu(s[0])
		}
		return conn.Set(s[1],s[2])
	}
}

func Sget() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) != 2 {
			return "", ErrArgu(s[0])
		}
		return conn.Sget(s[1])
	}
}

func Sin() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) != 3 {
			return "", ErrArgu(s[0])
		}
		return conn.Sin(s[1],s[2])
	}
}

func Spop() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) != 2 {
			return "", ErrArgu(s[0])
		}
		return conn.Spop(s[1])
	}
}

func Type() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) != 2 {
			return "", ErrArgu(s[0])
		}
		return conn.Type(s[1])
	}
}

func Version() CmdFunc {
	return func(conn *g.Client, s []string) (string, error) {
		if len(s) != 1 {
			return "", ErrArgu(s[0])
		}
		return conn.Version()
	}
}

var funcMap = map[string]CmdFunc{
	"dbsize": Dbsize(),
	"del": Del(),
	"exit": Exit(),
	"expire": Expire(),
	"get": Get(),
	"help": Help(),
	"incr": Incr(),
	"kvs": Kvs(),
	"len": Len(),
	"lget": Lget(),
	"llen": Llen(),
	"lpop": Lpop(),
	"lpush": Lpush(),
	"lset": Lset(),
	"nget": Nget(),
	"nset": Nset(),
	"ping": Ping(),
	"rpop": Rpop(),
	"rpush": Rpush(),
	"sadd": Sadd(),
	"sdel": Sdel(),
	"select": Select(),
	"set": Set(),
	"sget": Sget(),
	"sin": Sin(),
	"spop": Spop(),
	"type": Type(),
	"version": Version(),
}
